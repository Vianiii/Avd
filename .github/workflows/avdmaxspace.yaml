name: avd-rooted-mnt-storage-FIXED

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in hours (max 6)'
        required: false
        default: '6'

jobs:
  run-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Space & Enable KVM
        run: |
          echo "üìä Initial Disk Space:"
          echo "Root:"
          df -h / | tail -1
          echo "Mount:"
          df -h /mnt | tail -1
          
          echo ""
          echo "Enabling KVM..."
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules > /dev/null
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo chmod 666 /dev/kvm
          sudo usermod -a -G kvm runner
          echo "‚úÖ KVM enabled"

      - name: Setup Android SDK (Auto-accept licenses)
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          packages: 'system-images;android-30;google_apis;x86_64 platforms;android-30 build-tools;30.0.3'

      - name: Accept All Licenses (NO PROMPT)
        run: |
          echo "Auto-accepting all licenses..."
          
          # Get all license files
          find ~/.android/licenses -name "*.txt" -exec bash -c 'echo | tee "$1" > /dev/null' _ {} ;
          
          # Alternative: Pre-accept via environment
          yes | /usr/local/lib/android/sdk/cmdline-tools/16.0/bin/sdkmanager --licenses > /dev/null 2>&1 || true
          
          echo "‚úÖ All licenses accepted"

      - name: Move AVD Storage to /mnt (Fix Space Issue)
        run: |
          echo "üìÇ Creating AVD storage on /mnt (66GB available)..."
          
          sudo mkdir -p /mnt/android
          sudo chown $(whoami):$(whoami) /mnt/android
          
          # Remove old symlink if exists
          rm -rf ~/.android 2>/dev/null || true
          
          # Create symlink to /mnt
          mkdir -p /mnt/android/.android
          ln -s /mnt/android/.android ~/.android
          
          echo "‚úÖ AVD storage moved to /mnt"
          df -h /mnt | tail -1

      - name: Install FRP
        run: |
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          sudo cp frp_0.58.1_linux_amd64/frpc /usr/local/bin/
          sudo chmod +x /usr/local/bin/frpc
          rm -rf frp_0.58.1_linux_amd64*
          echo "‚úÖ FRP installed"

      - name: Create FRP Config
        run: |
          cat > frpc.toml << 'EOF'
          serverAddr = "159.195.6.61"
          serverPort = 7000
          transport.protocol = "kcp"
          
          [[proxies]]
          name = "github-avd-adb"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 5555
          remotePort = 5555
          EOF
          echo "‚úÖ FRP config created"

      - name: Start FRP Tunnel
        run: |
          nohup frpc -c frpc.toml > frpc.log 2>&1 &
          sleep 5
          pgrep -x "frpc" > /dev/null && echo "‚úÖ FRP tunnel running" || echo "‚ö†Ô∏è  FRP check"

      - name: Start Rooted Android 11 Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: pixel_6_pro
          ram-size: 6144M
          heap-size: 512M
          disk-size: 61440M
          emulator-options: -no-window -gpu swiftshader_indirect -memory 6144 -cores 4 -writable-system -no-metrics
          disable-animations: true
          script: |
            echo "========================================="
            echo "   üöÄ ROOTED ANDROID 11"
            echo "   üí™ MAXIMUM PERFORMANCE"
            echo "========================================="
            echo ""
            
            # Enable root
            adb root
            adb wait-for-device
            adb remount
            
            # TCP/IP
            adb tcpip 5555
            sleep 3
            adb connect 127.0.0.1:5555
            sleep 2
            
            echo ""
            echo "========================================="
            echo "   üì± DEVICE INFO"
            echo "========================================="
            
            echo "Android Version:"
            adb shell getprop ro.build.version.release
            
            echo ""
            echo "API Level:"
            adb shell getprop ro.build.version.sdk
            
            echo ""
            echo "Root Status:"
            adb shell id
            
            echo ""
            echo "Storage (/data):"
            adb shell df -h /data | head -2
            
            echo ""
            echo "RAM:"
            adb shell cat /proc/meminfo | head -1
            
            echo ""
            echo "========================================="
            echo "   üåê REMOTE ACCESS"
            echo "========================================="
            echo ""
            echo "üìç VPS: 159.195.6.61:5555"
            echo "üíª Command: adb connect 159.195.6.61:5555"
            echo "üîì Root: YES"
            echo "üìù System: WRITABLE"
            echo "‚ö° Protocol: KCP"
            echo ""
            echo "========================================="
            echo ""
            
            # Session loop
            DURATION=${{ github.event.inputs.duration || '6' }}
            DURATION_SEC=$((DURATION * 3600))
            START_TIME=$(date +%s)
            
            echo "‚è±Ô∏è  Session started: $(date)"
            echo ""
            
            ITERATION=0
            while true; do
              CURRENT_TIME=$(date +%s)
              ELAPSED=$((CURRENT_TIME - START_TIME))
              
              if [ $ELAPSED -ge $DURATION_SEC ]; then
                echo "‚úÖ Session completed!"
                break
              fi
              
              REMAINING=$((DURATION_SEC - ELAPSED))
              HOURS=$((REMAINING / 3600))
              MINUTES=$(((REMAINING % 3600) / 60))
              
              ITERATION=$((ITERATION + 1))
              
              # Status every minute
              if [ $((ITERATION % 60)) -eq 0 ]; then
                echo "[$(date '+%H:%M:%S')] ‚è≥ Time remaining: ${HOURS}h ${MINUTES}m"
              fi
              
              sleep 1
            done

      - name: Upload Session Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: avd-session
          path: frpc.log
          retention-days: 7
