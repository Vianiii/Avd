name: cloud-desktop-ubuntu-novnc-prod

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration in hours'
        required: true
        default: '6'

jobs:
  desktop:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Desktop, VNC, noVNC
        run: |
          echo "Installing system packages..."
          sudo apt-get update
          sudo apt-get install -y xfce4 xfce4-goodies tightvncserver wget git python3 python3-pip
          sudo apt-get install -y websockify x11vnc firefox
          
          # Setup VNC password securely
          VNC_PASS="cloud123"
          mkdir -p ~/.vnc
          echo "$VNC_PASS" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          echo "‚úÖ System packages installed"
          
          # Download noVNC
          echo "Downloading noVNC..."
          git clone --depth 1 https://github.com/novnc/noVNC.git ~/noVNC
          cd ~/noVNC
          git clone --depth 1 https://github.com/novnc/websockify.git utils/websockify
          
          echo "‚úÖ noVNC downloaded"

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo chmod 666 /dev/kvm
          echo "‚úÖ KVM enabled"

      - name: Start Virtual Desktop
        run: |
          echo "Starting virtual display..."
          export DISPLAY=:1
          
          # Start Xvfb (virtual framebuffer)
          Xvfb :1 -screen 0 1920x1080x24 > /tmp/xvfb.log 2>&1 &
          XVFB_PID=$!
          sleep 3
          
          echo "‚úÖ Xvfb started (PID: $XVFB_PID)"
          
          # Start XFCE desktop
          echo "Starting XFCE desktop..."
          startxfce4 > /tmp/xfce.log 2>&1 &
          XFCE_PID=$!
          sleep 5
          
          echo "‚úÖ XFCE started (PID: $XFCE_PID)"
          
          # Verify display is working
          ps aux | grep -E "Xvfb|xfce4" | grep -v grep

      - name: Start VNC Server
        run: |
          export DISPLAY=:1
          echo "Starting VNC server on port 5901..."
          
          x11vnc -display :1 -rfbauth ~/.vnc/passwd -forever -shared -bg -nopw -rfbport 5901 > /tmp/vnc.log 2>&1
          sleep 2
          
          # Verify VNC is running
          ps aux | grep x11vnc | grep -v grep
          netstat -tln | grep 5901 || echo "‚ö†Ô∏è  Waiting for VNC to bind..."
          
          echo "‚úÖ VNC server started on port 5901"

      - name: Start noVNC WebSocket Proxy
        run: |
          echo "Starting noVNC on port 6080..."
          cd ~/noVNC
          
          nohup python3 utils/novnc_proxy --vnc localhost:5901 --listen 6080 > /tmp/novnc.log 2>&1 &
          NOVNC_PID=$!
          sleep 3
          
          # Verify noVNC is running
          ps aux | grep novnc_proxy | grep -v grep
          netstat -tln | grep 6080
          
          echo "‚úÖ noVNC started on port 6080 (PID: $NOVNC_PID)"

      - name: Verify All Services
        run: |
          echo "========== SERVICE STATUS =========="
          echo ""
          echo "1Ô∏è‚É£  Xvfb (Virtual Display):"
          ps aux | grep "Xvfb :1" | grep -v grep || echo "‚ùå Not running"
          
          echo ""
          echo "2Ô∏è‚É£  XFCE Desktop:"
          ps aux | grep xfce4-session | grep -v grep || echo "‚ùå Not running"
          
          echo ""
          echo "3Ô∏è‚É£  VNC Server (x11vnc):"
          ps aux | grep x11vnc | grep -v grep || echo "‚ùå Not running"
          
          echo ""
          echo "4Ô∏è‚É£  noVNC WebSocket Proxy:"
          ps aux | grep novnc_proxy | grep -v grep || echo "‚ùå Not running"
          
          echo ""
          echo "5Ô∏è‚É£  Open Ports:"
          netstat -tln | grep -E "5901|6080"
          
          echo ""
          echo "========== LOGS SUMMARY =========="
          echo ""
          tail -5 /tmp/xvfb.log
          echo ""
          tail -5 /tmp/xfce.log
          echo ""
          tail -5 /tmp/vnc.log
          echo ""
          tail -10 /tmp/novnc.log

      - name: Setup FRP Tunnel (Production)
        run: |
          echo "Setting up FRP tunnel to VPS..."
          
          # Download FRP
          wget -q https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz
          tar -xzf frp_0.58.1_linux_amd64.tar.gz
          
          # Create FRP config
          cat > frpc.toml << 'EOF'
          serverAddr = "159.195.6.61"
          serverPort = 7000
          transport.protocol = "kcp"
          
          # Connection settings
          transport.dialServerTimeout = 10s
          transport.dialServerKeepAlive = 7200s
          
          [[proxies]]
          name = "novnc-production"
          type = "tcp"
          localIP = "127.0.0.1"
          localPort = 6080
          remotePort = 6080
          
          # Connection settings for proxy
          transport.useEncryption = false
          transport.useCompression = false
          EOF
          
          # Start FRP client
          echo "Starting FRP client..."
          nohup ./frp_0.58.1_linux_amd64/frpc -c frpc.toml > frpc.log 2>&1 &
          FRP_PID=$!
          sleep 3
          
          ps aux | grep frpc | grep -v grep
          
          echo ""
          echo "=========================================="
          echo "‚úÖ FRP TUNNEL ACTIVE (PID: $FRP_PID)"
          echo "=========================================="
          echo ""
          echo "üì± Access Desktop:"
          echo "   üëâ http://159.195.6.61:6080/vnc.html"
          echo ""
          echo "üîê Password: cloud123"
          echo ""
          echo "üìã What you can do:"
          echo "   ‚úÖ Download Android Studio"
          echo "   ‚úÖ Create & Root AVD"
          echo "   ‚úÖ Upload files to GitHub"
          echo "   ‚úÖ Access full Linux desktop"
          echo ""
          echo "=========================================="
          echo ""

      - name: Monitor Services
        run: |
          echo "Monitoring services..."
          for i in {1..5}; do
            echo "Check $i: $(date)"
            ps aux | grep -E "frpc|novnc_proxy|x11vnc" | grep -v grep | wc -l
            echo "Services running: $?"
            sleep 10
          done

      - name: Keep Workflow Alive
        run: |
          DURATION=${{ github.event.inputs.duration || '6' }}
          SECONDS=$((DURATION * 3600))
          
          echo "Workflow will run for $DURATION hours ($SECONDS seconds)"
          echo "Sleeping..."
          
          sleep $SECONDS

      - name: Upload Logs (Always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-logs
          path: |
            /tmp/xvfb.log
            /tmp/xfce.log
            /tmp/vnc.log
            /tmp/novnc.log
            frpc.log
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          pkill -f "Xvfb"
          pkill -f "x11vnc"
          pkill -f "novnc_proxy"
          pkill -f "frpc"
          echo "‚úÖ Cleanup complete"
